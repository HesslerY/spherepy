environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"

  matrix:
    - PYTHON: "C:\\Python27"
      PYTHON_VERSION: "2.7.8"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python27-x64"
      PYTHON_VERSION: "2.7.8"
      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Python33"
      PYTHON_VERSION: "3.3.5"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python33-x64"
      PYTHON_VERSION: "3.3.5"
      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Python34"
      PYTHON_VERSION: "3.4.1"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python34-x64"
      PYTHON_VERSION: "3.4.1"
      PYTHON_ARCH: "64"

cache:
  # I keep pre-built python wheels in this tmp folder so that I don't 
  # compile them each session. (This is where I put the numpy wheels.)
  # The file install_numpy.ps1 has been set as a cach item dependency,
  # numpy will be rebuilt.
  - C:\tmp -> \appveyor\install_numpy.ps1
 
install:
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  - "powershell ./appveyor/install.ps1"

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture.
  # [NOTE] I took numpy out of my appveyor-reqs.txt file because I don't want 
  # numpy to be built each time I run appveyor.
  - "%CMD_IN_ENV% pip install -r appveyor-reqs.txt"
  
  # Now that wheel has been installed, check to see if a numpy wheel has been
  # made yet. If it hasn't, compile it and put it in C:\tmp.
  - "powershell ./appveyor/install_numpy.ps1"
  
  # This is where I install numpy from the pre-built wheel I compiled either
  # earlier in this session, or in a previous session.
  - "%CMD_IN_ENV% pip install --no-index --find-links=c:\tmp numpy"

build: false  # Not a C# project, build stuff at the test step instead.

branches:
  only:
    - master
    - production

test_script:
  # Build the compiled extension and run the project tests
  - "%CMD_IN_ENV% python setup.py nosetests"

after_test:
  # If tests are successful, create a whl package for the project.
  - "%CMD_IN_ENV% python setup.py bdist_wheel"
  - ps: "ls dist"

artifacts:
  # Archive the generated wheel package in the ci.appveyor.com build report.
  - path: dist\*

#on_success:
#  - TODO: upload the content of dist/*.whl to a public wheelhouse
#